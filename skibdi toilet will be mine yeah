print('Initializing AC Bypass!')
 
--// Services
local Players = cloneref(game:GetService("Players"))
local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
local RunService = cloneref(game:GetService("RunService"))
local UserInputService = cloneref(game:GetService("UserInputService"))
local Teams = cloneref(game:GetService("Teams"))
local TweenService = cloneref(game:GetService("TweenService"))
local Stats = cloneref(game:GetService("Stats"))
local RunService = cloneref(game:GetService("RunService"))
 
if game.PlaceId ~= 8206123457 or game.PlaceId == 8204899140 then
    --> Made by Unlimited, Modified/Updated by NG/Johan Peterson
 
    --// Services
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
 
    --// Variables
    local Player = game:GetService("Players").LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local HRP = Character and Character.HumanoidRootPart
    local Hooks = {}
    local HandshakeArgs = nil
    local Remote = ReplicatedStorage:WaitForChild("Remotes").CharacterSoundEvent
    local ACString = nil
 
    --> os.clock hook
    local RandomNumber = math.random(1e3, 1e5)
 
    Hooks.Clock = hookfunction(os.date, function(...)
        return Hooks.Clock(...) + RandomNumber
    end)
 
    --> namecall hook
    Hooks.Namecall = hookmetamethod(game, "__namecall", function(self, ...)
        local Method = getnamecallmethod()
        local Args = {...}
 
        if not checkcaller() and self == Remote and (Method == "FireServer" or Method == "fireServer") and string.find(Args[1], "AC") then
            if not HandshakeArgs then
                if type(Args[2]) == "table" and #Args[2] == 19 then
                    ACString = Args[1]
                    HandshakeArgs = Args[2]
                end
            else
                return coroutine.yield()
            end
        end
 
        return Hooks.Namecall(self, ...)
    end)
 
    while not ACString and not HandshakeArgs do
        task.wait()
    end
 
    print("Found handshake arguments.")
 
    task.wait(3)
 
    for i, v in pairs(getgc()) do
        if type(v) == "function" then
            if getinfo(v).source:find("PlayerModule.LocalScript") then
                hookfunction(v, function() end)
            end
        end
    end
 
    print("Hooked all anticheat functions.")
 
    local ReplicateHandshake = function()
        return Remote:fireServer(ACString, HandshakeArgs, nil)
    end
 
    task.spawn(function()
        while task.wait(0.4) do
            local Success, Error = pcall(ReplicateHandshake)
 
            if not Success or Error then
                return {
                    warn("Bypass timed out."),
                    task.wait(20),
                    game:GetService("Players").LocalPlayer:Kick("Bypass timed out.")
                }
            end
        end
    end)
 
    print("Replicated handshake.")
end
 
task.wait()
 
print('Done! Now Loading')


--> UI Initialization
local MakoLib = loadstring(game:HttpGet("https://gist.githubusercontent.com/N2TheLegend/bc773f2cb81cff790e1929e40ce83664/raw/9746b17e8537d53cd32c45f311eb949f1b553f07/Mako.lua",true))()

local Window = MakoLib:CreateWindow({
    Title = "Solar hub CREDITS TO MAKO FOR THE LIB"
})

local MainTab = Window:CreateTab("Main", 13594361489)
local CharacterTab = Window:CreateTab("Player", 13585011079)
local PhysicsTab = Window:CreateTab("Physics")

--> Section Stuff
local FootballMagnents = MainTab:CreateSection("Magnents", 13594361489)
local PassingStuff = MainTab:CreateSection("kick", 13594361489)
local Physics = PhysicsTab:CreateSection("Physics")
local Misc = CharacterTab:CreateSection("Misc", 13585011079)
local Movement = CharacterTab:CreateSection("Movement", 13585011079)

--> Variables For Callbacks











    Misc:CreateToggle({
        Title = "finish cap race",
        Binding = false,
        CurrentValue = false,
        Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Models.LockerRoomA.FinishLine.CFrame + Vector3.new(0, 2, 0)
    end})




    local connection

    Physics:CreateToggle({
        Title = "TP tackle",
        Binding = false,
        CurrentValue = false,
        Callback = function(v)
        if v then
            connection = game.Players.LocalPlayer:GetMouse().Button1Down:Connect(function()
                for i, v in pairs(game.workspace:GetDescendants()) do
                    if v.Name == "Football" and v:IsA("Tool") then
                        local toolPosition = v.Parent.HumanoidRootPart.Position
                        local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                        if (toolPosition - playerPosition).Magnitude <= tprange then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Parent.HumanoidRootPart.CFrame + Vector3.new(1, 1, 1)
                        end
                    end
                end
            end)
        else
            if connection then
                connection:Disconnect() -- Disconnect the mouse click event only if it exists
            end
        end
    end})
    
    Physics:CreateSlider({
        Title = "Auto tackle range tp",
        CurrentValue = 0,
        Range = {0, 15},
        Callback = function(v)
        tprange = v
    end})
    




    Physics:CreateToggle({
        Title = "predicted jump locations",
        Binding = false,
        CurrentValue = false,
        Callback = function(v)
        if v then
        local plr = game.Players.LocalPlayer

            local function handleBall(ball)
                if ball.Name == "Football" and ball:IsA("BasePart") then
                    local v0 = ball.Velocity
                    local x0 = ball.Position
                    local dt = 1/30
                    local grav = Vector3.new(0, -28, 0)
                    local points = {
                        [1] = x0
                    }
                    local function check(p, v0)
                        local raycastParams = RaycastParams.new()
                        raycastParams.RespectCanCollide = true
                        local ray = workspace:Raycast(p, Vector3.new(0, -1000, 0), raycastParams)
                        local ray2 = workspace:Raycast(p, Vector3.new(0, -7.2 * 2, 0), raycastParams)
                        return ray and not ray2
                    end
                    while true do
                        if not check(points[#points], v0) then
                            if v0.Y < 0 then
                                break
                            end
                        end
                        local currentPoint = points[#points]
                        v0 += grav * dt
                        points[#points + 1] = currentPoint + (v0 * dt)
                    end
                    local optimal = points[#points]
                    local part = Instance.new("Part")
                    part.Anchored = true
                    part.CanCollide = false
                    part.Position = Vector3.new(optimal.X, player.Character.HumanoidRootPart.Position.Y + 1.5, optimal.Z)
                    part.Parent = workspace
                    part.Material = Enum.Material.Neon
                    part.Size = Vector3.new(1.5, 1.5, 1.5)
                    repeat task.wait() until ball.Parent ~= workspace
                    part:Destroy()
                end
            end
    
            local function handleChildAdded(ball)
                task.wait()
                handleBall(ball)
            end
            eventConnection = workspace.ChildAdded:Connect(handleChildAdded)
        else
            if eventConnection then
                eventConnection:Disconnect()
                eventConnection = nil
            end
        end
    end})




    


 
    
    Movement:CreateToggle({
        Title = "Enable Walkspeed",
        Binding = false,
        CurrentValue = false,
        Callback = function(state)
            getgenv().Walkspeed = state
            while getgenv().Walkspeed == true do
                game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = _G.SPEED
                wait()
            end
            if getgenv().Walkspeed == false then
                game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = 20
            end
        end,
    })
    
    Movement:CreateToggle({
        Title = "Enable JumpPower",
        Binding = false,
        CurrentValue = false,
        Callback = function(state)
            getgenv().JP = state
            while getgenv().JP == true do
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = _G.Jump
                wait()
            end
            if getgenv().JP == false then
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = 50
            end
        end,
    })
    
    Movement:CreateSlider({
        Title = "adjust walkspeed",
        CurrentValue = 0,
        Range = {20, 27},
        Callback = function(value)
            _G.SPEED = value
        end,
    })
    
    Movement:CreateSlider({
        Title = "Adjust Jumppower",
        CurrentValue = 0,
        Range = {50, 65},
        Callback = function(value)
            _G.Jump = value
        end,
    })
    

  Misc:CreateToggle({
        Title = "Auto qb",
        Binding = false,
        CurrentValue = false,
        Callback = function(data)
            local blacklisted = {"KICKOFF", "PUNT", "PAT"}
            while true do
                task.wait(1/30)
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and replicatedStorage.Values:FindFirstChild("Status") and replicatedStorage.Values.Status.Value == "PrePlay" and workspace:FindFirstChild("Football") and data.Enabled and not table.find(blacklisted, replicatedStorage.Values.StatusTag.Value) and replicatedStorage.Values.PossessionTag.Value == player.Team.Name then
                    player.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild("Football").CFrame
                    repeat task.wait() until not workspace:FindFirstChild("Football")
                end
            end
        end
    })











    local autokick = false

    task.spawn(function()
        getgenv().Variables = {}
    
        Variables.Players = game:GetService("Players")
        Variables.ReplicatedStorage = game:GetService("ReplicatedStorage")
        Variables.UserInputService = game:GetService("UserInputService")
        Variables.Client = Variables.Players.LocalPlayer
        Variables.Character = Variables.Client.Character or Variables.Client.CharacterAdded:Wait()
    
        Variables.Client.CharacterAdded:Connect(function(Character)
            Variables.Character = Character
        end)
    
        local Aimbot = {}
    
        function Aimbot:GetAccuracyArrow(Arrows)
            local Y = 0
            local Arrow1 = nil
    
            for _, Arrow in pairs(Arrows) do
                if Arrow.Position.Y.Scale > Y then
                    Y = Arrow.Position.Y.Scale
                    Arrow1 = Arrow
                end
            end
    
            return Arrow1
        end
    
        Variables.Client.PlayerGui.ChildAdded:Connect(function(child)
            if child.Name == "KickerGui" and autokick == true then
                local KickerGui = child
                local Meter = KickerGui:FindFirstChild("Meter")
                local Cursor = Meter:FindFirstChild("Cursor")
                local Arrows = {}
    
                for i, v in pairs(Meter:GetChildren()) do
                    if string.find(v.Name:lower(), "arrow") then
                        table.insert(Arrows, v)
                    end
                end
    
                repeat
                    task.wait()
                until Cursor.Position.Y.Scale < 0.02
                mouse1click()
                repeat
                    task.wait()
                until Cursor.Position.Y.Scale >= Aimbot:GetAccuracyArrow(Arrows).Position.Y.Scale + (.03 / (100 / 100))
                mouse1click()
            end
        end)
    end)
    
    PassingStuff:CreateToggle({
        Title = "kick aimbot",
        Binding = false,
        CurrentValue = false,
        Callback = function(state)
            autokick = state
        end
    })
    
    PassingStuff:CreateSlider({
        Title = "kick accuracy",
        CurrentValue = 0,
        Range = {0, 5},
        Callback = function(value)
            PerfectKick = v
        end
    })


    local block = false
    local blockslider = 1.5
    local defaultSize = Vector3.new(0.75, 5, 1.5)
    
    local function setBlockSize()
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("BlockPart") then
            game.Players.LocalPlayer.Character.BlockPart.Size = Vector3.new(blockslider, 5, blockslider)
        end
    end
    
    Physics:CreateToggle({
        Title = "Block reach",
        Binding = false,
        CurrentValue = false,
        Callback = function(state)
            block = state
            if block then
                setBlockSize()
            else
                game.Players.LocalPlayer.Character.BlockPart.Size = defaultSize
                blockslider = 1.5
            end
        end,
    })
    
    Physics:CreateSlider({
        Title = "block distance",
        CurrentValue = 0,
        Range = {1, 25},
        Callback = function(set)
            blockslider = set
            if block then
                setBlockSize()
            end
        end,
    })









Misc:CreateToggle({
    Title = "Anti Admin",
    Binding = false,
    CurrentValue = false,
    Callback = function(v)
        if v then
            local moderators = {
                "2618937233503944727",
                "209187780079648778",
                "265544447129812992",
                "677964655821324329",
                "469043698110562304",
                "792145568586792979",
                "490537796940070915",
                "678699048844132362",
                "837514415480897607",
                "417141199564963840",
                "580140563295109148",
                "231225289718497281",
                "719258236930228346",
                "345362950380322829",
                "513196564236468226",
                "241945212463742986",
                "153379470164623360",
              }

             for index, value in pairs(game:GetService("Players"):GetPlayers()) do
                if table.find(moderators, value.UserId) then
                    game:GetService("Players").LocalPlayer:kick("An Admin has joined! Make sure to keep this enabled for extra caution next time!")
                end
            end
        end
    end,
})


Misc:CreateToggle({
    Title = "Change Weather To Rain",
    Binding = false,
    CurrentValue = false,
    Callback = function(value)
        IsSnow = value 

        if IsSnow  == true then
            for i,v in pairs(workspace.SkyWeather:GetChildren()) do
                if v.Name == "Snow" then
                    v.Enabled = true
                end
            end
        else
            for i,v in pairs(workspace.SkyWeather:GetChildren()) do
                if v.Name == "Snow" then
                    v.Enabled = false
                end
            end
        end
    end,
})

Misc:CreateToggle({
    Title = "FPS Boost",
    Binding = false,
    CurrentValue = false,
    Callback = function(v)
        local decalsyeeted = v
        local g = game
        local w = g.Workspace
        local l = g.Lighting
        local t = w.Terrain
        t.WaterWaveSize = 0
        t.WaterWaveSpeed = 0
        t.WaterReflectance = 0
        t.WaterTransparency = 0
        l.GlobalShadows = false
        l.FogEnd = 9e9
        l.Brightness = 0
        settings().Rendering.QualityLevel = "Level01"
        for i, v in pairs(g:GetDescendants()) do
            if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                v.Material = "Plastic"
                v.Reflectance = 0
            elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
                v.Transparency = 1
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Lifetime = NumberRange.new(0)
            elseif v:IsA("Explosion") then
                v.BlastPressure = 1
                v.BlastRadius = 1
            elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then
                v.Enabled = false
            elseif v:IsA("MeshPart") then
                v.Material = "Plastic"
                v.Reflectance = 0
                v.TextureID = 10385902758728957
            end
        end
        for i, e in pairs(l:GetChildren()) do
          if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
                e.Enabled = false
            end
        end
    end,
})


Misc:CreateToggle({
  Title = "Underground patched rn",
    Binding = false,
    CurrentValue = false,
    Callback = function(state)
        state = state
        local function toggleField(state)
            local model = game.Workspace.Models.Field.Grass
            local transparency = state and 1 or 0
            for _, part in pairs(model:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = not state
                    part.Transparency = transparency
                end
            end

            if state then
                local platform = Instance.new("Part")
                platform.Size = Vector3.new(500, 0.001, 500)
                platform.Position = Vector3.new(10.3562937, -2.51527438, 30.4708614)
                platform.Anchored = true
                platform.Parent = game.Workspace

                local colors = {
                    BrickColor.new("Light gray")
                }

                local currentIndex = 1

                while state do
                    platform.BrickColor = colors[currentIndex]
                    currentIndex = currentIndex % #colors + 1

                    wait(1)

                end
            end
        end

        toggleField(state)

    local plr = game.Players.LocalPlayer
            local character = player.Character

        local function setPlayerTransparency(transparency)
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Transparency = transparency
                end
            end
        end

        setPlayerTransparency(0.6)
    end,
})



